<?xml version="1.0" encoding="UTF-8" ?>
<results>
    <error file="INIReader.h" line="173" id="variableScope" severity="style" msg="The scope of the variable &apos;start&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="Info.cpp" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="INIReader.h" line="421" id="cstyleCast" severity="style" msg="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." />
    <error file="jsonxx.h" line="153" id="noExplicitConstructor" severity="style" msg="Class &apos;Object&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="jsonxx.h" line="204" id="noExplicitConstructor" severity="style" msg="Class &apos;Array&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="jsonxx.h" line="315" id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="jsonxx.h" line="317" id="noExplicitConstructor" severity="style" msg="Class &apos;Value&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="INIReader.h" line="309" id="noExplicitConstructor" severity="style" msg="Class &apos;INIReader&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="cxxtimer.h" line="49" id="noExplicitConstructor" severity="style" msg="Class &apos;Timer&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="InfoSystem.cpp" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="InfoSystem.cpp" line="40" id="variableScope" severity="style" msg="The scope of the variable &apos;total&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="InfoSystem.cpp" line="85" id="unreadVariable" severity="style" msg="Variable &apos;totalVirtualMem&apos; is assigned a value that is never used." />
    <error file="InfoSystem.cpp" line="105" id="unassignedVariable" severity="style" msg="Variable &apos;ld&apos; is not assigned a value." />
    <error file="InfoSystem.cpp" line="112" id="unassignedVariable" severity="style" msg="Variable &apos;ld&apos; is not assigned a value." />
    <error file="InfoSystem.cpp" line="107" id="uninitvar" severity="error" msg="Uninitialized variable: ld" />
    <error file="InfoSystem.cpp" line="114" id="uninitvar" severity="error" msg="Uninitialized variable: ld" />
    <error file="InfoSystem.h" line="7" id="unusedStructMember" severity="style" msg="struct member &apos;CertExpiryInfo::certExpiryDays&apos; is never used." />
    <error file="ManagdAgent_Lin.cpp" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="ManagdAgent_Lin.cpp" line="33" id="redundantAssignment" severity="style" msg="Variable &apos;val&apos; is reassigned a value before the old one has been used." />
    <error file="ManagdAgent_Lin.cpp" line="34" id="redundantAssignment" severity="style" msg="Variable &apos;str&apos; is reassigned a value before the old one has been used." />
    <error file="ManagdAgent_Lin.cpp" line="67" id="postfixOperator" severity="style" msg="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." />
    <error file="ShellProcess.cpp" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="Utility.cpp" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="clue.hpp" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="clue.hpp" line="592" id="noExplicitConstructor" severity="style" msg="Class &apos;syslog&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." />
    <error file="jsonxx.cc" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="stdafx.cpp" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="stdafx.h" line="0" id="toomanyconfigs" severity="style" msg="The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." />
    <error file="ShellProcess.cpp" line="23" id="unusedFunction" severity="style" msg="The function &apos;ExecPowerShellScript&apos; is never used." />
    <error file="Utility.cpp" line="70" id="unusedFunction" severity="style" msg="The function &apos;explode&apos; is never used." />
    <error file="Utility.cpp" line="56" id="unusedFunction" severity="style" msg="The function &apos;getEXEPath&apos; is never used." />
    <error file="clue.hpp" line="325" id="unusedFunction" severity="style" msg="The function &apos;is_true&apos; is never used." />
    <error file="clue.hpp" line="393" id="unusedFunction" severity="style" msg="The function &apos;now_text&apos; is never used." />
    <error file="clue.hpp" line="556" id="unusedFunction" severity="style" msg="The function &apos;the_log&apos; is never used." />
    <error file="clue.hpp" line="337" id="unusedFunction" severity="style" msg="The function &apos;to_module_text&apos; is never used." />
    <error file="jsonxx.cc" line="1051" id="unusedFunction" severity="style" msg="The function &apos;write&apos; is never used." />
    <error id="missingInclude" severity="style" msg="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config." />
</results>
